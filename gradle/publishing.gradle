/*
 * Copyright 2018 NEM
 * Copyright 2019 ProximaX
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

publishing {
	def isSnapshot = project.version.endsWith('SNAPSHOT')
    publications {
        mavenJava(MavenPublication) {
            //artifactId = 'my-library'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'ProximaX Sirius Blockchain Java SDK'
                description = 'The ProximaX Sirius Chain Java SDK is a Java library for interacting with the Sirius Blockchain.'
                url = 'https://github.com/proximax-storage/java-xpx-chain-sdk'
                organization {
                    name = 'ProximaX'
                    url = 'https://github.com/proximax-storage'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/proximax-storage/java-xpx-chain-sdk/issues'
                }
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://github.com/proximax-storage/java-xpx-chain-sdk/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'tonowie'
                        name = 'Anton Wiedermann'
                        email = 'sdkdevs@proximax.io'
                    }
                }
                scm {
                    url = 'https://github.com/proximax-storage/java-xpx-chain-sdk'
                    connection = 'scm:git:git://github.com/proximax-storage/java-xpx-chain-sdk.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'local'
            // publish to local repository
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
        	name = "internal"
            url = 'https://nexus.internal.proximax.io/repository/maven-releases'
            credentials {
                username = project.hasProperty("nexusUsername") ? project.nexusUsername : ""
                password = project.hasProperty("nexusPassword") ? project.nexusPassword : ""
            }
        }
        maven {
            name = 'release'
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = project.hasProperty("sonatypeUsername") ? project.sonatypeUsername : ""
                password = project.hasProperty("sonatypePassword") ? project.sonatypePassword : ""
            }
        }
        maven {
            name = 'snapshot'
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            credentials {
                username = project.hasProperty("sonatypeUsername") ? project.sonatypeUsername : ""
                password = project.hasProperty("sonatypePassword") ? project.sonatypePassword : ""
            }
        }
    }
}

// sign the publishing
signing {
    // if in memory pgp keys are defined then use those. If not defined then use the default method using file
	if (project.hasProperty("signingKey") && (project.hasProperty("signingPassword"))) {
    	def signingKey = findProperty("signingKey")
    	def signingPassword = findProperty("signingPassword")
    	useInMemoryPgpKeys(signingKey, signingPassword)
    }
    // sign the publishing
    sign publishing.publications.mavenJava
}

// add HTML5 flag for java9 javadoc
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}